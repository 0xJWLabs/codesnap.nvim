%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
name: Luau
file_extensions:
  - luau
scope: source.luau
contexts:
  main:
    - include: function-definition
    - include: number
    - include: string
    - include: shebang
    - include: comment
    - include: local-declaration
    - include: for-loop
    - include: type-alias-declaration
    - include: keyword
    - include: language_constant
    - include: standard_library
    - include: identifier
    - include: operator
    - include: parentheses
    - include: table
    - include: type_cast
    - include: type_annotation
    - include: attribute
  comment:
    - match: '--\[(=*)\['
      push:
        - meta_scope: comment.block.luau
        - match: '\]\1\]'
          pop: true
        - match: (```lua)\s+
          captures:
            1: comment.luau
          push:
            - meta_scope: keyword.operator.other.luau
            - match: (```)
              captures:
                1: comment.luau
              pop: true
            - include: scope:source.luau
        - include: doc_comment_tags
    - match: '---'
      push:
        - meta_scope: comment.line.double-dash.documentation.luau
        - match: \n
          pop: true
        - include: doc_comment_tags
    - match: '--'
      push:
        - meta_scope: comment.line.double-dash.luau
        - match: \n
          pop: true
  attribute:
    - match: '(@)([a-zA-Z_][a-zA-Z0-9_]*)'
      scope: meta.attribute.luau
      captures:
        1: keyword.operator.attribute.luau
        2: storage.type.attribute.luau
  doc_comment_tags:
    - match: '@\w+'
      scope: storage.type.class.luadoc.luau
    - match: '((?<=[\s*!\/])[\\@]param)(?:\s)+(\b\w+\b)'
      captures:
        1: storage.type.class.luadoc.luau
        2: variable.parameter.luau
  for-loop:
    - match: \b(for)\b
      captures:
        1: keyword.control.luau
      push:
        - match: \b(in)\b|(=)
          captures:
            1: keyword.control.luau
            2: keyword.operator.assignment.luau
          pop: true
        - match: (:)
          captures:
            1: keyword.operator.type.luau
          push:
            - match: '(?=\s*in\b|\s*[=,]|\s*$)'
              pop: true
            - include: type_literal
        - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
          scope: variable.parameter.luau
  function-definition:
    - match: '\b(?:(local)\s+)?(function)\b(?![,:])'
      captures:
        1: storage.modifier.local.luau
        2: keyword.control.luau
      push:
        - meta_scope: meta.function.luau
        - match: '(?<=[\)\-{}\[\]"''])'
          pop: true
        - include: comment
        - include: generics-declaration
        - match: (\()
          captures:
            1: punctuation.definition.parameters.begin.luau
          push:
            - meta_scope: meta.parameter.luau
            - match: (\))
              captures:
                1: punctuation.definition.parameters.end.luau
              pop: true
            - include: comment
            - match: \.\.\.
              scope: variable.parameter.function.varargs.luau
            - match: '[a-zA-Z_][a-zA-Z0-9_]*'
              scope: variable.parameter.function.luau
            - match: ','
              scope: punctuation.separator.arguments.luau
            - match: ':'
              captures:
                0: keyword.operator.type.luau
              push:
                - match: '(?=[\),])'
                  pop: true
                - include: type_literal
        - match: \b(__add|__call|__concat|__div|__eq|__index|__le|__len|__lt|__metatable|__mod|__mode|__mul|__newindex|__pow|__sub|__tostring|__unm|__iter|__idiv)\b
          scope: variable.language.metamethod.luau
        - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
          scope: entity.name.function.luau
  generics-declaration:
    - match: (<)
      push:
        - match: (>)
          pop: true
        - match: '[a-zA-Z_][a-zA-Z0-9_]*'
          scope: entity.name.type.luau
        - match: '='
          scope: keyword.operator.assignment.luau
        - include: type_literal
  identifier:
    - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b(?=\s*(?:[({"'']|\[\[))'
      scope: entity.name.function.luau
    - match: '(?<=[^.]\.|:)\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
      scope: variable.other.property.luau
    - match: '\b([A-Z_][A-Z0-9_]*)\b'
      scope: variable.other.constant.luau
    - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
      scope: variable.other.readwrite.luau
  interpolated_string_expression:
    - match: '\{'
      captures:
        0: punctuation.definition.interpolated-string-expression.begin.luau
      push:
        - meta_scope: meta.template.expression.luau
        - meta_content_scope: meta.embedded.line.luau
        - match: '\}'
          captures:
            0: punctuation.definition.interpolated-string-expression.end.luau
          pop: true
        - include: scope:source.luau
  keyword:
    - match: \b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|in|continue)\b
      scope: keyword.control.luau
    - match: \b(local)\b
      scope: storage.modifier.local.luau
    - match: '\b(function)\b(?![,:])'
      scope: keyword.control.luau
    - match: '(?<![^.]\.|:)\b(self)\b'
      scope: variable.language.self.luau
    - match: \b(and|or|not)\b
      scope: keyword.operator.logical.luau keyword.operator.wordlike.luau
    - match: '(?<=[^.]\.|:)\b(__add|__call|__concat|__div|__eq|__index|__le|__len|__lt|__metatable|__mod|__mode|__mul|__newindex|__pow|__sub|__tostring|__unm)\b'
      scope: variable.language.metamethod.luau
    - match: '(?<![.])\.{3}(?!\.)'
      scope: keyword.other.unit.luau
  language_constant:
    - match: '(?<![^.]\.|:)\b(false)\b'
      scope: constant.language.boolean.false.luau
    - match: '(?<![^.]\.|:)\b(true)\b'
      scope: constant.language.boolean.true.luau
    - match: '(?<![^.]\.|:)\b(nil(?!:))\b'
      scope: constant.language.nil.luau
  local-declaration:
    - match: \b(local)\b
      captures:
        1: storage.modifier.local.luau
      push:
        - match: '(?=\s*do\b|\s*[=;]|\s*$)'
          pop: true
        - include: comment
        - include: attribute
        - match: (:)
          captures:
            1: keyword.operator.type.luau
          push:
            - match: '(?=\s*do\b|\s*[=;,]|\s*$)'
              pop: true
            - include: type_literal
        - match: '\b([A-Z_][A-Z0-9_]*)\b'
          scope: variable.other.constant.luau
        - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
          scope: variable.other.readwrite.luau
  number:
    - match: '\b0_*[xX]_*[\da-fA-F_]*(?:[eE][\+\-]?_*\d[\d_]*(?:\.[\d_]*)?)?'
      scope: constant.numeric.hex.luau
    - match: '\b0_*[bB][01_]+(?:[eE][\+\-]?_*\d[\d_]*(?:\.[\d_]*)?)?'
      scope: constant.numeric.binary.luau
    - match: '(?:\d[\d_]*(?:\.[\d_]*)?|\.\d[\d_]*)(?:[eE][\+\-]?_*\d[\d_]*(?:\.[\d_]*)?)?'
      scope: constant.numeric.decimal.luau
  operator:
    - match: '==|~=|!=|<=?|>=?'
      scope: keyword.operator.comparison.luau
    - match: \+=|-=|/=|//=|\*=|%=|\^=|\.\.=|=
      scope: keyword.operator.assignment.luau
    - match: \+|-|%|\*|\/\/|\/|\^
      scope: keyword.operator.arithmetic.luau
    - match: '#|(?<!\.)\.{2}(?!\.)'
      scope: keyword.operator.other.luau
  parentheses:
    - match: (\()
      captures:
        1: punctuation.arguments.begin.luau
      push:
        - match: (\))
          captures:
            1: punctuation.arguments.end.luau
          pop: true
        - match: ','
          scope: punctuation.separator.arguments.luau
        - include: scope:source.luau
  shebang:
    - match: \A(#!).*$\n?
      scope: comment.line.shebang.luau
      captures:
        1: punctuation.definition.comment.luau
  standard_library:
    - match: '(?<![^.]\.|:)\b(assert|collectgarbage|error|gcinfo|getfenv|getmetatable|ipairs|loadstring|newproxy|next|pairs|pcall|print|rawequal|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|typeof|unpack|xpcall)\b'
      scope: support.function.luau
    - match: '(?<![^.]\.|:)\b(_G|_VERSION)\b'
      scope: constant.language.luau
    - match: '(?<![^.]\.|:)\b(bit32\.(?:arshift|band|bnot|bor|btest|bxor|extract|lrotate|lshift|replace|rrotate|rshift|countlz|countrz|byteswap)|coroutine\.(?:create|isyieldable|resume|running|status|wrap|yield|close)|debug\.(?:info|loadmodule|profilebegin|profileend|traceback)|math\.(?:abs|acos|asin|atan|atan2|ceil|clamp|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|noise|pow|rad|random|randomseed|round|sign|sin|sinh|sqrt|tan|tanh)|os\.(?:clock|date|difftime|time)|string\.(?:byte|char|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|split|sub|unpack|upper)|table\.(?:concat|create|find|foreach|foreachi|getn|insert|maxn|move|pack|remove|sort|unpack|clear|freeze|isfrozen|clone)|task\.(?:spawn|synchronize|desynchronize|wait|defer|delay)|utf8\.(?:char|codepoint|codes|graphemes|len|nfcnormalize|nfdnormalize|offset)|buffer\.(?:create|fromstring|tostring|len|readi8|readu8|readi16|readu16|readi32|readu32|readf32|readf64|writei8|writeu8|writei16|writeu16|writei32|writeu32|writef32|writef64|readstring|writestring|copy|fill))\b'
      scope: support.function.luau
    - match: '(?<![^.]\.|:)\b(bit32|buffer|coroutine|debug|math(\.(huge|pi))?|os|string|table|task|utf8(\.charpattern)?)\b'
      scope: support.constant.luau
    - match: '(?<![^.]\.|:)\b(delay|DebuggerManager|elapsedTime|PluginManager|printidentity|settings|spawn|stats|tick|time|UserSettings|version|wait|warn)\b'
      scope: support.function.luau
    - match: '(?<![^.]\.|:)\b(game|plugin|shared|script|workspace|Enum(?:\.\w+){0,2})\b'
      scope: constant.language.luau
  string:
    - match: '"'
      push:
        - meta_scope: string.quoted.double.luau
        - match: '"'
          pop: true
        - include: string_escape
    - match: "'"
      push:
        - meta_scope: string.quoted.single.luau
        - match: "'"
          pop: true
        - include: string_escape
    - match: '\[(=*)\['
      push:
        - meta_scope: string.other.multiline.luau
        - match: '\]\1\]'
          pop: true
    - match: '`'
      push:
        - meta_scope: string.interpolated.luau
        - match: '`'
          pop: true
        - include: interpolated_string_expression
        - include: string_escape
  string_escape:
    - match: '\\[abfnrtvz''"`{\\]'
      scope: constant.character.escape.luau
    - match: '\\\d{1,3}'
      scope: constant.character.escape.luau
    - match: '\\x[0-9a-fA-F]{2}'
      scope: constant.character.escape.luau
    - match: '\\u\{[0-9a-fA-F]*\}'
      scope: constant.character.escape.luau
    - match: \\$
      scope: constant.character.escape.luau
  table:
    - match: '(\{)'
      captures:
        1: punctuation.table.begin.luau
      push:
        - match: '(\})'
          captures:
            1: punctuation.table.end.luau
          pop: true
        - match: '[,;]'
          scope: punctuation.separator.fields.luau
        - include: scope:source.luau
  type-alias-declaration:
    - match: ^\b(?:(export)\s+)?(type)\b
      captures:
        1: storage.modifier.visibility.luau
        2: storage.type.luau
      push:
        - match: (?=\s*$)|(?=\s*;)
          pop: true
        - include: type_literal
        - match: '='
          scope: keyword.operator.assignment.luau
  type_annotation:
    - match: ':(?!\b([a-zA-Z_][a-zA-Z0-9_]*)\b(?=\s*(?:[({"'']|\[\[)))'
      push:
        - match: (?<=\))(?!\s*->)|=|;|$|(?=\breturn\b)|(?=\bend\b)
          pop: true
        - include: comment
        - include: type_literal
  type_cast:
    - match: (::)
      captures:
        1: keyword.operator.typecast.luau
      push:
        - match: '(?=^|[;),}\]:?\-\+\>](?!\s*[&\|])|$|\b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|in|continue)\b)'
          pop: true
        - include: type_literal
  type_literal:
    - include: comment
    - include: string
    - match: \?|\&|\|
      scope: keyword.operator.type.luau
    - match: '->'
      scope: keyword.operator.type.luau
    - match: \b(false)\b
      scope: constant.language.boolean.false.luau
    - match: \b(true)\b
      scope: constant.language.boolean.true.luau
    - match: \b(nil|string|number|boolean|thread|userdata|symbol|any)\b
      scope: support.type.primitive.luau
    - match: \b(typeof)\b(\()
      captures:
        1: support.function.luau
        2: punctuation.arguments.begin.typeof.luau
      push:
        - match: (\))
          captures:
            1: punctuation.arguments.end.typeof.luau
          pop: true
        - include: scope:source.luau
    - match: (<)
      captures:
        1: keyword.operator.type.luau
      push:
        - match: (>)
          captures:
            1: keyword.operator.type.luau
          pop: true
        - match: '='
          scope: keyword.operator.assignment.luau
        - include: type_literal
    - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
      scope: entity.name.type.luau
    - match: '\{'
      push:
        - match: '\}'
          pop: true
        - match: '\['
          push:
            - match: '\]'
              pop: true
            - include: type_literal
        - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b(:)'
          captures:
            1: variable.property.luau
            2: keyword.operator.type.luau
        - include: type_literal
        - match: '[,;]'
          scope: punctuation.separator.fields.type.luau
    - match: \(
      push:
        - match: \)
          pop: true
        - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b(:)'
          scope: variable.parameter.luau
          captures:
            1: variable.parameter.luau
            2: keyword.operator.type.luau
        - include: type_literal
